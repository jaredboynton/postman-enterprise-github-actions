name: Propagate Postman Workflow

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run (no PRs created)'
        type: boolean
        default: false
      target_repo:
        description: 'Specific repo to target (leave empty for all)'
        type: string
        required: false

jobs:
  propagate-workflow:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup GitHub CLI
      run: |
        echo "GitHub CLI is pre-installed on GitHub runners"
        gh --version

    - name: Scan and update repositories
      env:
        GH_TOKEN: ${{ secrets.ORG_PROPAGATOR_TOKEN || github.token }}
        DRY_RUN: ${{ inputs.dry_run || 'false' }}
        TARGET_REPO: ${{ inputs.target_repo }}
      run: |
        #!/bin/bash
        set -e

        # Configuration
        ORG="${{ github.repository_owner }}"
        WORKFLOW_PATH=".github/workflows/postman.yml"
        TEMPLATE_FILE="templates/postman-workflow.yml"
        BRANCH_NAME="add-postman-workflow"
        REPOS_UPDATED=0
        REPOS_SKIPPED=0
        REPOS_FAILED=0

        echo "========================================="
        echo "Postman Workflow Propagator"
        echo "Organization: $ORG"
        echo "Dry Run: $DRY_RUN"
        echo "Target Repo: ${TARGET_REPO:-All repos}"
        echo "========================================="
        echo ""

        # Function to check if workflow exists in repo
        check_workflow_exists() {
          local repo=$1
          gh api "repos/$ORG/$repo/contents/$WORKFLOW_PATH" >/dev/null 2>&1
        }

        # Function to check if PR already exists
        check_pr_exists() {
          local repo=$1
          local pr_count=$(gh pr list --repo "$ORG/$repo" --head "$BRANCH_NAME" --state open --json number --jq '. | length')
          [ "$pr_count" -gt 0 ]
        }

        # Function to create PR with workflow
        create_workflow_pr() {
          local repo=$1

          echo "  Creating PR for $repo..."

          if [ "$DRY_RUN" = "true" ]; then
            echo "  [DRY RUN] Would create PR for $ORG/$repo"
            return 0
          fi

          # Clone the repo
          TEMP_DIR=$(mktemp -d)
          cd "$TEMP_DIR"

          # Clone with token authentication
          git clone "https://x-access-token:${GH_TOKEN}@github.com/$ORG/$repo.git" repo
          cd repo

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create branch
          git checkout -b "$BRANCH_NAME" 2>/dev/null || {
            echo "  Branch $BRANCH_NAME already exists, skipping"
            cd ../..
            rm -rf "$TEMP_DIR"
            return 1
          }

          # Create workflow directory if needed
          mkdir -p .github/workflows

          # Copy workflow template
          cp "$GITHUB_WORKSPACE/$TEMPLATE_FILE" "$WORKFLOW_PATH"

          # Replace organization placeholder if needed
          if [[ "$ORG" != "postman-cs" ]]; then
            sed -i "s/postman-cs/$ORG/g" "$WORKFLOW_PATH"
          fi

          # Commit and push
          git add "$WORKFLOW_PATH"
          git commit -m "Add Postman integration workflow

This workflow enables automatic Postman workspace and collection
management for this repository, synchronizing with Git branches.

For more information, see: https://github.com/postman-cs/postman-scaffolding"

          git push origin "$BRANCH_NAME"

          # Create PR
          pr_url=$(gh pr create \
            --repo "$ORG/$repo" \
            --title "Add Postman integration workflow" \
            --body "## Automated Postman Integration Setup

This PR adds the Postman workflow to enable automatic workspace and collection management.

### What this enables:
- ✅ Automatic workspace creation on first push to main/master
- ✅ Automatic collection forking for feature/bugfix/hotfix branches
- ✅ Automatic cleanup when PRs are merged
- ✅ Integration with your organization's centralized Postman setup

### Next Steps:
1. Review and merge this PR
2. On first push to main/master, the workflow will create your Postman workspace
3. Check the workflow output for workspace/collection IDs to store (one-time setup)

### Configuration:
- To allow all users: Set repository variable \`POSTMAN_ALLOW_ALL_USERS=true\`
- For advanced setup with automated variable storage, see the [documentation](https://github.com/postman-cs/postman-scaffolding#organization-level-setup)

---
*This PR was automatically created by the Postman Workflow Propagator*" \
            --head "$BRANCH_NAME" \
            --base "$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')")

          echo "  ✓ PR created: $pr_url"

          # Cleanup
          cd ../..
          rm -rf "$TEMP_DIR"

          return 0
        }

        # Get list of repos
        if [ -n "$TARGET_REPO" ]; then
          REPOS="$TARGET_REPO"
        else
          # Get all repos in the org (up to 1000)
          REPOS=$(gh api "orgs/$ORG/repos?per_page=100&type=all" --paginate --jq '.[].name')
        fi

        # Process each repository
        echo "Processing repositories..."
        echo ""

        for repo in $REPOS; do
          # Skip the .github repo itself
          if [ "$repo" = ".github" ] || [ "$repo" = "postman-scaffolding" ]; then
            continue
          fi

          echo "Checking $repo..."

          # Check if workflow already exists
          if check_workflow_exists "$repo"; then
            echo "  ✓ Workflow already exists"
            ((REPOS_SKIPPED++))
            continue
          fi

          # Check if PR already exists
          if check_pr_exists "$repo"; then
            echo "  ⏳ PR already open"
            ((REPOS_SKIPPED++))
            continue
          fi

          # Create PR
          if create_workflow_pr "$repo"; then
            ((REPOS_UPDATED++))
          else
            ((REPOS_FAILED++))
          fi

          echo ""
        done

        # Summary
        echo "========================================="
        echo "Summary:"
        echo "  Repos with PRs created: $REPOS_UPDATED"
        echo "  Repos skipped: $REPOS_SKIPPED"
        echo "  Repos failed: $REPOS_FAILED"
        echo "========================================="

        # Create GitHub summary
        cat >> $GITHUB_STEP_SUMMARY << EOF
        ## Postman Workflow Propagation Summary

        | Status | Count |
        |--------|-------|
        | PRs Created | $REPOS_UPDATED |
        | Skipped (already have workflow/PR) | $REPOS_SKIPPED |
        | Failed | $REPOS_FAILED |

        **Organization:** $ORG
        **Dry Run:** $DRY_RUN
        EOF

        if [ "$REPOS_FAILED" -gt 0 ]; then
          echo "⚠️ Some repositories failed. Check the logs for details." >> $GITHUB_STEP_SUMMARY
          exit 1
        fi